---
import { Image } from 'astro:assets'
import BaseLayout from "@/layouts/BaseLayout.astro"
import { formatDate } from '@/scripts/utils'

const { post, minutesRead } = Astro.props
---
<BaseLayout pageTitle={post.title} postImage={post.image.url}>
  <article class="flex flex-col mt-10 mb-20">
    <div class="relative mb-8">
      <Image
        class="size-full aspect-video md:aspect-2/1 object-cover select-none rounded-xl"
        src={post.image.url} alt={post.image.alt}
        width="100%" height="100%"
        loading="eager"
      />
      <p class="absolute bottom-2 sm:bottom-4 right-2 sm:right-4 max-sm:text-xs max-md:text-sm font-medium rounded-md bg-lightest px-2 md:px-3.5 py-1">
        {minutesRead}
      </p>
    </div>

    <div class="grid md:grid-cols-[1fr_auto] gap-5">
      <ul class="col-span-full flex flex-wrap gap-x-2 gap-y-4 text-xs">
        {post.tags.map(tag => (
          <li>
            <a href={`/tags/${tag}`} class={`shrink-0 px-2.5 py-0.5 rounded-full ${tag === 'eol' ? 'uppercase bg-purple text-white hover:bg-purple-dark focus:outline-purple-dark' : 'bg-green-light/60 hover:bg-green-darker focus:outline-green-darker hover:text-white'} outline-1 outline-offset-1 outline-transparent transition-all`}>
              {tag}
            </a>
          </li>
        ))}
      </ul>

      <h1 class="col-span-full font-ms text-2xl md:text-3xl font-bold mt-1">
        {post.title}
      </h1>

      <div class="space-y-1">
        <p>
          {post.description}
        </p>

        {post.link &&
          <p>
            Visit:
            <a href={post.link} target="_blank" class=`
              text-blue font-medium outline-offset-3 outline-1 outline-dashed outline-transparent
              hover:outline-blue-light focus:outline-blue-light [transition:outline-color_.2s]
            `>
              {post.link}
            </a>
          </p>
        }
      </div>

      <ul class="max-sm:mt-1 self-end flex md:flex-col flex-wrap gap-x-5 gap-y-1 md:gap-1 sm:max-md:justify-end sm:items-end text-green-darkest max-md:text-sm">
        <li class={`${post.modDate ? 'opacity-50' : 'opacity-100'}`}>
          Published: <span class="text-darkest tracking-wide font-medium">{formatDate(post.pubDate)}</span>
        </li>
        {post.modDate &&
          <li>
            Last modified: <span class="text-darkest tracking-wide font-medium">{formatDate(post.modDate)}</span>
          </li>
        }
      </ul>
    </div>

    <div class="grid lg:grid-cols-[auto_1fr] gap-10 mt-14 sm:mt-20">
      <aside class="lg:sticky top-6 lg:top-10 z-20 h-fit lg:w-[271px] p-2 bg-lightest border border-dashed border-green-dark rounded-md space-y-4">
        <ul class="table-of-contents group/ul space-y-1">
          <li>
            loading...
          </li>
        </ul>
        <div class="h-2.5 w-full p-px rounded-full bg-green-light/60 border border-green-dark">
          <div id="post-progress" class="h-full bg-green-dark rounded-full transition-[width]" style="width: 0"></div>
        </div>
      </aside>

      <div class="md-post lg:max-w-2xl">
        <slot />
      </div>
    </div>

    <ul class="mx-auto mt-10 max-w-[450px] lg:hidden bottom-toc opacity-100 [&:not(.active)]:opacity-0 [&:not(.active)]:pointer-events-none sticky z-20 bottom-6 w-full p-2 bg-lightest border border-dashed border-green-dark rounded-md space-y-4 transition-opacity cursor-pointer">
      <li class="bottom-toc-item flex gap-2 bg-green-light border border-green-dark px-2 py-px rounded pointer-events-none">
        loading...
      </li>
      <li class="h-2.5 w-full p-px rounded-full bg-green-light/60 border border-green-dark">
        <div id="bottom-post-progress" class="h-full bg-green-dark rounded-full transition-[width]" style="width: 0"></div>
      </li>
    </ul>
  </article>
</BaseLayout>

<script>
  const galleryImgs = document.querySelectorAll('.post-gallery img')
  galleryImgs.forEach(img => {
    img.addEventListener('click', () => {
      img.classList.toggle('viewed')
    })
  })

  const post = document.querySelector('.md-post')
  const postHeadings = post.querySelectorAll(':is(h2,h3)')
  const listing = Array.from(postHeadings).map(el => ({
    heading: parseInt(el.tagName[1]),
    title: el.textContent,
    hash: el.id
  }))

  const toc = document.querySelector('.table-of-contents')
  const tocTop = toc.getBoundingClientRect().top
  const bottomToc = document.querySelector('.bottom-toc')

  let lastH2 = null
  let h2Count = 1
  let h3Count = 1

  toc.innerHTML = listing.map(el => {
    const html = `
      <li class="toc-item flex gap-2 [.active]:bg-green-light border border-transparent [.active]:border-green-dark px-2 py-px rounded hover:bg-green-light/70 transition-colors select-none">
        <span class="tracking-wider font-semibold">${el.heading === 2 ? `${h2Count}.` : `${h2Count-1}.${h3Count}.`}</span>
        <a href="#${el.hash}" class="${el.heading === 2 ? 'font-semibold' : ''} flex-1">${el.title}</a>
      </li>
    `

    if (el.heading === 2) {
      if (lastH2 !== el) lastH2 = el
      h2Count++
      h3Count = 1
    } else {
      h3Count++
    }

    return html
  }).join('')

  const handleHeadingIntersection = () => {
    const tocItems = document.querySelectorAll('.toc-item')
    const bottomTocItem = document.querySelector('.bottom-toc-item')
    const activeHeading = document.querySelector('.table-of-contents .active')
    const postTop = document.querySelector('.md-post').getBoundingClientRect().top
    const postHeight = document.documentElement.scrollHeight-window.innerHeight-postTop-5

    if (window.innerWidth < 1024 && document.documentElement.scrollTop > tocTop + toc.parentElement.clientHeight) {
      if (!bottomToc.classList.contains('active')) bottomToc.classList.add('active')
      document.getElementById('bottom-post-progress').style.setProperty('width', `${Math.floor((document.documentElement.scrollTop-postTop)*100/postHeight)}%`)
    } else {
      if (bottomToc.classList.contains('active')) bottomToc.classList.remove('active')
    }

    document.getElementById('post-progress').style.setProperty('width', `${Math.floor((document.documentElement.scrollTop-postTop)*100/postHeight)}%`)

    if (document.documentElement.scrollTop > document.documentElement.scrollHeight-window.innerHeight-5) {
      tocItems.forEach(item => {
        if (tocItems[tocItems.length-1] === item) {
          item.classList.add('active')
        } else {
          item.classList.remove('active')
        }
      })
    } else {
      postHeadings.forEach(heading => {
        if (heading.getBoundingClientRect().top < 32) {
          tocItems.forEach(item => {
            const itemHash = item.querySelector('a').href.split('#')[1]
            if (itemHash === heading.id) {
              item.classList.add('active')
            } else {
              item.classList.remove('active')
            }
          })
        }
      })
    }
    if (window.location.hash !== '') bottomTocItem.innerHTML = document.querySelector(`.table-of-contents .toc-item:has(a[href='${window.location.hash}'])`).innerHTML
    if (activeHeading) bottomTocItem.innerHTML = activeHeading.innerHTML
  }

  document.addEventListener('scroll', handleHeadingIntersection)
  bottomToc.addEventListener('click', () => {
    document.documentElement.scrollTo({top: tocTop-32})
  })
</script>